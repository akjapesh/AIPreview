package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"backend/database"
	"backend/graph"
	"backend/graph/model"
	"backend/pkg/auth"
	"context"
	"fmt"
	"strings"
	"time"

	"golang.org/x/crypto/bcrypt"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUpInput) (bool, error) {

	exists, err := database.UserExists(r.Conn, input.Email, input.Name)
	if err != nil {
		return false, fmt.Errorf("error checking existing user: %w", err)
	}
	if exists {
		return false, fmt.Errorf("user with given email or username already exists")
	}

	// Hash the password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return false, fmt.Errorf("failed to hash password: %w", err)
	}

	// Create the user struct
	newUser := database.User{
		Username:     strings.ToLower(input.Name),
		Email:        strings.ToLower(input.Email),
		PasswordHash: string(hashedPassword),
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
		IsActive:     true,
	}

	// Save user to the database
	_, err = database.SaveUser(r.Conn, newUser)
	if err != nil {
		return false, fmt.Errorf("failed to create user: %w", err)
	}

	return true, nil

}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.AuthResponse, error) {
	// Find user
	user, err := database.FetchUserByEmail(r.Conn, strings.ToLower(input.Email))
	if err != nil {
		return nil, fmt.Errorf("failed to fetch user: %w", err)
	}

	// Verify the password
	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(input.Password))
	if err != nil {
		return nil, fmt.Errorf("invalid password")
	}

	// Generate the token
	token, err := auth.GenerateToken(user.ID.String())
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %w", err)
	}

	// Convert the internal user model to the GraphQL model
	graphQLUser := &model.User{
		ID:       user.ID.String(),
		Username: user.Username,
		Email:    user.Email,
		IsActive: &user.IsActive,
		// CreatedAt: user.CreatedAt.Format(time.RFC3339),
		// UpdatedAt: user.CreatedAt.Format(time.RFC3339),
	}

	return &model.AuthResponse{
		Token: token,
		User:  graphQLUser,
	}, nil
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, userID string) (*model.User, error) {

	panic(fmt.Errorf("not implemented: GetUserByID - getUserById"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
