package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"backend/graph"
	"backend/graph/model"
	internalModel "backend/internal/model"
	"backend/pkg/auth"
	"context"
	"fmt"

	"golang.org/x/crypto/bcrypt"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUpInput) (bool, error) {
	for _, u := range r.users {
		if u.Email == input.Email {
			return false, fmt.Errorf("email already exists")
		}
	}

	// Hash password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return false, err
	}

	// Create user
	user := &internalModel.InternalUser{
		ID:       fmt.Sprintf("user_%d", len(r.users)+1),
		Email:    input.Email,
		Name:     input.Name,
		Password: string(hashedPassword),
	}
	r.users[user.ID] = user

	return true, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.AuthResponse, error) {
	// Find user
	var user *internalModel.InternalUser
	for _, u := range r.users {
		if u.Email == input.Email {
			user = u
			break
		}
	}
	if user == nil {
		return nil, fmt.Errorf("user not found")
	}

	// Verify password
	err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password))
	if err != nil {
		return nil, fmt.Errorf("invalid password")
	}

	// Generate token
	token, err := auth.GenerateToken(user.ID)
	if err != nil {
		return nil, err
	}

	return &model.AuthResponse{
		Token: token,
		User:  user.ToGraphQL(),
	}, nil
}

// GetUserID is the resolver for the getUserId field.
func (r *queryResolver) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	user, exists := r.users[userID]
	if !exists {
		return nil, fmt.Errorf("user not found")
	}
	return user.ToGraphQL(), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
